; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24210.0 

	TITLE	C:\4k_intro\pbr-whitespace-master\src\_windows\main_rel.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?lpSoundBuffer@@3PAMA				; lpSoundBuffer
PUBLIC	?fragment_glsl@@3PBDB				; fragment_glsl
PUBLIC	?out_glsl@@3PBDB				; out_glsl
PUBLIC	?post_glsl@@3PBDB				; post_glsl
_BSS	SEGMENT
?lpSoundBuffer@@3PAMA DD 0c81cc0H DUP (?)		; lpSoundBuffer
_BSS	ENDS
wavehdr	SEGMENT
?WaveHDR@@3Uwavehdr_tag@@A DD FLAT:?lpSoundBuffer@@3PAMA ; WaveHDR
	DD	03207300H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?MMTime@@3Ummtime_tag@@A DD 02H				; MMTime
	DD	00H
	ORG $+4
$SG48291 DB	'glGetObjectParameterivARB', 00H
$SG48294 DB	00H
	ORG $+1
$SG48292 DB	'glGetInfoLogARB', 00H
$SG48295 DB	'v', 00H
wavehdr	ENDS
wavefmt	SEGMENT
?WaveFMT@@3UtWAVEFORMATEX@@A DW 03H			; WaveFMT
	DW	02H
	DD	0ac44H
	DD	056220H
	DW	08H
	DW	020H
	DW	00H
wavefmt	ENDS
_DATA	SEGMENT
?screenSettings@@3U_devicemodeA@@A DB 00H		; screenSettings
	ORG $+31
	DW	00H
	DW	00H
	DW	09cH
	DW	00H
	DD	01c0000H
	DW	00H
	ORG $+14
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DB	00H
	ORG $+31
	DW	00H
	DD	020H
	DD	0500H
	DD	02d0H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?fragment_glsl@@3PBDB DD FLAT:$SG47330			; fragment_glsl
?out_glsl@@3PBDB DD FLAT:$SG47333			; out_glsl
?post_glsl@@3PBDB DD FLAT:$SG47336			; post_glsl
_DATA	ENDS
CONST	SEGMENT
?pfd@@3UtagPIXELFORMATDESCRIPTOR@@B DW 028H		; pfd
	DW	01H
	DD	025H
	DB	00H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DD	00H
	DD	00H
	DD	00H
$SG47330 DB	'#version 130', 0aH, 'uniform int m;float v=m*.0001;const'
	DB	' vec3 f=vec3(0.,.001,1.);const float s=3.14159;float x(vec2 f'
	DB	'){return fract(10000.*sin(17.*f.x+.1*f.y)*(.1+abs(sin(13.*f.y'
	DB	'+f.x))));}float n(vec3 v){return n(vec2(n(v.xy),v.z));}float '
	DB	'd(vec3 v){vec3 z=floor(v);v=v-z;v*=v*(3.-2.*v);return mix(mix'
	DB	'(mix(n(z),n(z+f.zxx),v.x),mix(n(z+f.xzx),n(z+f.zzx),v.x),v.y)'
	DB	',mix(mix(n(z+f.xxz),n(z+f.zxz),v.x),mix(n(z+f.xzz),n(z+f.zzz)'
	DB	',v.x),v.y),v.z);}float d(vec3 v,vec3 x){return v=abs(v)-x,max'
	DB	'(v.x,max(v.y,v.z));}float n(vec2 v,vec2 x){return v=abs(v)-x,'
	DB	'max(v.x,v.y);}mat3 t(float v){float m=sin(v),x=cos(v);return '
	DB	'mat3(1.,0.,0.,0.,x,-m,0.,m,x);}mat3 e(float v){float m=sin(v)'
	DB	',x=cos(v);return mat3(x,0.,m,0.,1.,0,-m,0.,x);}mat3 r(float v'
	DB	'){float m=sin(v),a=cos(v);return mat3(a,m,0.,-m,a,0.,0.,0.,1.'
	DB	');}float e(vec3 v,float x){return length(v)-x;}vec3 r(vec3 v,'
	DB	'vec3 m){return mod(v,m)-m*.5;}vec2 t(vec2 v,vec2 m){return mo'
	DB	'd(v,m)-m*.5;}float d(vec3 v,float m,float x,float z){float a='
	DB	'length(v);return max(abs(v.y)-z,max(a-x,m-a));}float K(vec2 v'
	DB	'){return max(v.x,v.y);}float i(vec3 m){m=e(v*.1)*m;const floa'
	DB	't a=2.8;const int z=2;vec3 f=vec3(1.1,.9,1.9);for(int x=0;x<z'
	DB	';++x){m=m*e(.1+v*.3);m=abs(m);m.xy+=step(m.x,m.y)*(m.yx-m.xy)'
	DB	';m.xz+=step(m.x,m.z)*(m.zx-m.xz);m.yz+=step(m.y,m.z)*(m.zy-m.'
	DB	'yz);m=m*r(.1);m.xy=m.xy*a-(a-1.)*f.xy;m.z=a*m.z;if(m.z>.5*f.z'
	DB	'*(a-1.))m.z-=f.z*(a-1.);}return n(m,vec3(1.))*pow(a,-float(z)'
	DB	');}bool z=true,y=false,c=false;int a=0;', 0aH, '#define PICK('
	DB	'd,dn,mn)if(domat){if(dn<d){d=dn;mindex=mn;}}else d=min(d,dn);'
	DB	0aH, 'float o(vec3 v){float m=K(abs(v.xy)-vec2(2.,.1));if(y)m='
	DB	'm+max(0.,.2*n(t(v.xz,vec2(.1)),vec2(.01)));v.x=abs(v.x)+.02;f'
	DB	'loat a=K(abs(v.xy-vec2(2.,1.))-vec2(.02)),x=max(abs(mod(v.z,.'
	DB	'4)-.2)-.02,max(abs(v.y-.5)-.5,abs(v.x-2.)-.02));return min(m,'
	DB	'min(a,x));}float h(vec3 v){return n(v-vec3(33.,1.6,0.),vec3(2'
	DB	'0.,1.5,1.96));}', 0aH, '#define LN 3', 0aH, 'vec3 P[3],l[3];f'
	DB	'loat p(vec3 v){float m=100000.;if(z)for(int f=0;f<LN;++f)PICK'
	DB	'(m,length(v-P[f])-.1,f+100);float x=-min(h(vec3(abs(v.x),v.yz'
	DB	')),h(vec3(abs(v.z),v.yx))),a=max(-e(v,19.),n(t(v,vec3(2.)),ve'
	DB	'c3(.8))),f=-e(v,20.);PICK(m,f,1);PICK(m,a,2);m=max(x,m);float'
	DB	' d=e(v,9.);d=max(d,abs(abs(v.y)-3.)-.5);d=min(d,n(t(v,vec3(11'
	DB	'.8)),vec3(.1,100.,.1)));d=max(d,-e(v,8.9));float r=o(vec3(len'
	DB	'gth(v.xz)-13.,v.y,atan(v.x,v.z)*10.));r=min(r,max(15.-length('
	DB	'v.xz),min(o(v.zyx),o(v))));r=max(r,x);PICK(m,d,3);PICK(m,r,4)'
	DB	';PICK(m,i(v/4.)*4.,5);return m;}vec3 w(vec3 v){float m=p(v);r'
	DB	'eturn normalize(vec3(p(v+f.yxx)-m,p(v+f.xyx)-m,p(v+f.xxy)-m))'
	DB	';}void K(vec3 m,out vec3 f,out vec3 x,out vec3 r,out float i,'
	DB	'out float z){y=true;c=true;f=w(m);x=vec3(0.,1.,1.);r=vec3(0.)'
	DB	';i=0.;z=0.;if(a==1)x=vec3(0.),r=vec3(1.),i=.5,z=.99;else if(a'
	DB	'==2){float n=sin(v+dot(normalize(vec3(1.)),floor(m/2.)));r=ma'
	DB	'x(0.,n)*vec3(1.);x=vec3(0.);i=.2;z=.99;}else if(a==3)x=vec3(0'
	DB	'.),r=vec3(1.),i=.8,z=.99;else if(a==4)x=vec3(0.),r=vec3(.56,.'
	DB	'57,.58),z=.8,i=.2,i=.2+.6*pow(d(m*4.+40.),4.);else if(a==5)x='
	DB	'vec3(0.),r=vec3(1.),i=.9,z=0.;else{for(int P=0;P<LN;++P)if(a='
	DB	'=100+P)x=l[P],r=vec3(0.),i=0.,z=0.;}c=false;y=false;}vec3 K(f'
	DB	'loat m,vec3 v){return v+(1.-v)*pow(1.-m,5.);}float K(vec3 v,v'
	DB	'ec3 m,float f){f*=f;f*=f;float x=max(dot(v,m),0.),r=x*x*(f-1.'
	DB	')+1.;r=s*r*r;return f/r;}float h(float v,float m){return m+=1'
	DB	'.,m*=m/8.,v/(v*(1.-m)+m);}float K(vec3 v,vec3 m,vec3 x,float '
	DB	'f){float a=max(dot(v,m),0.),d=max(dot(v,x),0.),r=h(a,f),z=h(d'
	DB	',f);return z*r;}vec3 e(vec3 v,vec3 m,float x,float z){float f'
	DB	'=0.,a=1000.;int r;for(r=0;r<128;++r){vec3 d=v+m*f;float i=p(d'
	DB	');f+=i*x;a=min(a,i);if(i<.002*f||f>z)break;}return vec3(f,a,f'
	DB	'loat(r));}vec3 K(vec3 v,vec3 m,vec3 a,float x,vec3 f,float z,'
	DB	'float i){vec3 r=vec3(0.);for(int y=0;y<LN;++y){vec3 d=P[y]-v;'
	DB	'float n=dot(d,d),c=sqrt(n);d=normalize(d);vec3 M=e(v+.02*d,d,'
	DB	'1.,c);if(M.y<.005||M.x<c)continue;vec3 o=normalize(m+d),p=l[y'
	DB	']/n,t=mix(vec3(.04),f,z),N=K(max(dot(o,m),0.),t);float w=K(a,'
	DB	'o,i),h=K(a,m,d,i);vec3 g=w*h*N;float V=4.*max(dot(a,m),0.)*ma'
	DB	'x(dot(a,d),0.)+.001;vec3 L=g/V,u=vec3(1.)-N;u*=1.-z;float k=m'
	DB	'ax(dot(a,d),0.);r+=(u*f/s+L)*p*k;}vec3 d=vec3(.03)*f*x;return'
	DB	' d+r;}mat3 d(vec3 v,vec3 m,vec3 f){vec3 x=normalize(v-m),a=no'
	DB	'rmalize(cross(f,x));f=cross(x,a);return mat3(a,f,x);}void mai'
	DB	'n(){vec2 v=gl_FragCoord.xy/V*2.-1.;v.x*=V.x/V.y;float m=1.;P['
	DB	'0]=10.*vec3(sin(m),1.,cos(m));P[1]=10.*vec3(sin(-m+3.),1.,cos'
	DB	'(m+3.));P[2]=12.*vec3(0.,sin(m*.7),0.);l[0]=vec3(10.);l[1]=ve'
	DB	'c3(9.,10.,5.);l[2]=vec3(14.,7.,3.);mat3 x=e(M.x*.002)*t(M.y*.'
	DB	'002);vec3 a=x*vec3(0.,0.,max(.1,M.z/10.)),r=normalize(vec3(v,'
	DB	'-1.44));mat3 i=d(a,vec3(10.,0.,0.),f.xzx);a+=i*vec3(v*.01,0.)'
	DB	';r=i*r;vec3 n=f.zxz;const float y=40.;vec3 o=e(a,r,1.,y);if(o'
	DB	'.x<y){z=false;vec3 s=a+o.x*r,c,p,N;float h,k;K(s,N,p,c,k,h);n'
	DB	'=p+K(s,-r,N,0.,c,h,k);}gl_FragColor=vec4(n,o.x);}', 00H
	ORG $+3
$SG47333 DB	'uniform sampler2D g;uniform vec2 d;uniform float v;void '
	DB	'main(){if(gl_FragCoord.y<10.){gl_FragColor=vec4(step(gl_FragC'
	DB	'oord.x/d.x,v));return;}vec2 r=gl_FragCoord.xy/d;vec3 s=textur'
	DB	'e2D(g,r).xyz;gl_FragColor=vec4(s,1.);}', 00H
	ORG $+7
$SG47336 DB	'uniform sampler2D z;uniform vec2 f;uniform float v;void '
	DB	'main(){vec2 v=gl_FragCoord.xy/f;vec4 i=texture2D(z,v);vec3 c='
	DB	'vec3(0.);float s=2.;const int w=256;const float r=2.399;mat2 '
	DB	't=mat2(cos(r),sin(r),-sin(r),cos(r));vec3 m=vec3(0.);vec4 u=v'
	DB	'ec4(i.xyz,1.);vec2 a=vec2(.002*f.y/f.x,.002),g=vec2(0.,1.1);f'
	DB	'loat p=1.;for(int e=0;e<w;e++){p+=1./p;g*=t;vec2 o=a*(p-1.)*g'
	DB	';vec4 l=texture2D(z,v+o);m+=l.xyz;if(l.w<i.w){float x=length('
	DB	'o),n=abs(l.w-s)/f.x,y=step(x,n);y=step(x*.01,y);u+=vec4(l.xyz'
	DB	',1.)*y;}}c+=pow(m/float(w),vec3(2.));c+=u.xyz/u.w;c=c/(c+1.);'
	DB	'gl_FragColor=vec4(pow(c,vec3(1./2.2)),1.);}', 00H
CONST	ENDS
PUBLIC	?entrypoint@@YGXXZ				; entrypoint
EXTRN	__imp__ExitProcess@4:PROC
EXTRN	__imp__CreateThread@24:PROC
EXTRN	__imp__ChoosePixelFormat@8:PROC
EXTRN	__imp__SetPixelFormat@12:PROC
EXTRN	__imp__wglCreateContext@4:PROC
EXTRN	__imp__wglGetProcAddress@4:PROC
EXTRN	__imp__wglMakeCurrent@8:PROC
EXTRN	__imp__SwapBuffers@4:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	__imp__GetAsyncKeyState@4:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__imp__ShowCursor@4:PROC
EXTRN	__imp__ChangeDisplaySettingsA@8:PROC
EXTRN	__imp__waveOutOpen@24:PROC
EXTRN	__imp__waveOutPrepareHeader@12:PROC
EXTRN	__imp__waveOutWrite@12:PROC
EXTRN	__imp__waveOutGetPosition@12:PROC
EXTRN	__imp__timeGetTime@0:PROC
EXTRN	__imp__glRects@16:PROC
EXTRN	?EXT_Init@@YGXXZ:PROC				; EXT_Init
EXTRN	__4klang_render@4:PROC
EXTRN	?myglfunc@@3PAPAXA:BYTE				; myglfunc
_BSS	SEGMENT
?hWaveOut@@3PAUHWAVEOUT__@@A DD 01H DUP (?)		; hWaveOut
_BSS	ENDS
; Function compile flags: /Ogspy
; File c:\4k_intro\pbr-whitespace-master\src\_windows\main_rel.cpp
;	COMDAT ?entrypoint@@YGXXZ
_TEXT	SEGMENT
_result$ = -2052					; size = 4
_info$ = -2048						; size = 2048
?entrypoint@@YGXXZ PROC					; entrypoint, COMDAT

; 69   : {

	sub	esp, 2052				; 00000804H
	push	ebx
	push	ebp
	push	esi
	push	edi

; 70   : 	// initialize window
; 71   : 	#ifdef FULLSCREEN
; 72   : 	ChangeDisplaySettings(&screenSettings,CDS_FULLSCREEN);

	push	4
	push	OFFSET ?screenSettings@@3U_devicemodeA@@A
	call	DWORD PTR __imp__ChangeDisplaySettingsA@8

; 73   : 	ShowCursor(0);

	xor	esi, esi
	push	esi
	call	DWORD PTR __imp__ShowCursor@4

; 74   : 	HDC hDC = GetDC(CreateWindow((LPCSTR)0xC018, 0, WS_POPUP | WS_VISIBLE, 0, 0, XRES, YRES, 0, 0, 0, 0));

	push	esi
	push	esi
	push	esi
	push	esi
	push	720					; 000002d0H
	push	1280					; 00000500H
	push	esi
	push	esi
	push	-1879048192				; 90000000H
	push	esi
	push	49176					; 0000c018H
	push	esi
	call	DWORD PTR __imp__CreateWindowExA@48
	push	eax
	call	DWORD PTR __imp__GetDC@4
	mov	ebp, eax

; 75   : 	#else
; 76   : 	HDC hDC = GetDC(CreateWindow("static", 0, WS_POPUP | WS_VISIBLE, 0, 0, XRES, YRES, 0, 0, 0, 0));
; 77   : 	#endif	
; 78   : 
; 79   : 	// initalize opengl
; 80   : 	SetPixelFormat(hDC,ChoosePixelFormat(hDC,&pfd),&pfd);

	mov	eax, OFFSET ?pfd@@3UtagPIXELFORMATDESCRIPTOR@@B
	push	eax
	push	eax
	push	ebp
	call	DWORD PTR __imp__ChoosePixelFormat@8
	push	eax
	push	ebp
	call	DWORD PTR __imp__SetPixelFormat@12

; 81   : 	wglMakeCurrent(hDC,wglCreateContext(hDC));

	push	ebp
	call	DWORD PTR __imp__wglCreateContext@4
	push	eax
	push	ebp
	call	DWORD PTR __imp__wglMakeCurrent@8

; 82   : 	EXT_Init();

	call	?EXT_Init@@YGXXZ			; EXT_Init

; 83   : 
; 84   : 	// initialize, compile and link shader(s)
; 85   : 	const int pid = oglCreateProgram();

	call	DWORD PTR ?myglfunc@@3PAPAXA

; 86   : 	const int fsId = oglCreateShader(GL_FRAGMENT_SHADER);

	push	35632					; 00008b30H
	mov	ebx, eax
	call	DWORD PTR ?myglfunc@@3PAPAXA+4

; 87   : 	oglShaderSource(fsId, 1, &post_glsl, 0);

	push	esi
	push	OFFSET ?post_glsl@@3PBDB		; post_glsl
	mov	edi, eax
	push	1
	push	edi
	call	DWORD PTR ?myglfunc@@3PAPAXA+8

; 88   : 	oglShaderSource(fsId, 1, &out_glsl, 0);

	push	esi
	push	OFFSET ?out_glsl@@3PBDB			; out_glsl
	push	1
	push	edi
	call	DWORD PTR ?myglfunc@@3PAPAXA+8

; 89   : 	oglShaderSource(fsId, 1, &fragment_glsl, 0);

	push	esi
	push	OFFSET ?fragment_glsl@@3PBDB		; fragment_glsl
	push	1
	push	edi
	call	DWORD PTR ?myglfunc@@3PAPAXA+8

; 90   : 	oglCompileShader(fsId);

	push	edi
	call	DWORD PTR ?myglfunc@@3PAPAXA+12

; 91   : 
; 92   : 	#ifdef SHADER_DEBUG
; 93   : 	int result;
; 94   : 	char info[2048];
; 95   : 	#define oglGetObjectParameteriv ((PFNGLGETOBJECTPARAMETERIVARBPROC) wglGetProcAddress("glGetObjectParameterivARB"))
; 96   : 	#define oglGetInfoLog ((PFNGLGETINFOLOGARBPROC) wglGetProcAddress("glGetInfoLogARB"))
; 97   : 	oglGetObjectParameteriv(fsId, GL_OBJECT_COMPILE_STATUS_ARB, &result);

	mov	esi, DWORD PTR __imp__wglGetProcAddress@4
	lea	eax, DWORD PTR _result$[esp+2068]
	push	eax
	push	35713					; 00008b81H
	push	edi
	push	OFFSET $SG48291
	call	esi
	call	eax

; 98   : 	oglGetInfoLog(fsId, 2047, NULL, (char*)info);

	lea	eax, DWORD PTR _info$[esp+2068]
	push	eax
	push	0
	push	2047					; 000007ffH
	push	edi
	push	OFFSET $SG48292
	call	esi
	call	eax

; 99   : 	if(!result)

	cmp	DWORD PTR _result$[esp+2068], 0
	jne	SHORT $LN5@entrypoint

; 100  : 	{
; 101  : 		MessageBox(NULL, info, "", 0x00000000L);

	xor	ebx, ebx
	lea	eax, DWORD PTR _info$[esp+2068]
	push	ebx
	push	OFFSET $SG48294
	push	eax
	push	ebx
	call	DWORD PTR __imp__MessageBoxA@16

; 102  : 		ExitProcess(0);

	push	ebx
$LN12@entrypoint:
	call	DWORD PTR __imp__ExitProcess@4
$LN13@entrypoint:
$LN5@entrypoint:

; 103  : 	}
; 104  : 	#endif
; 105  : 
; 106  : 	oglAttachShader(pid, fsId);

	push	edi
	push	ebx
	call	DWORD PTR ?myglfunc@@3PAPAXA+16

; 107  : 	oglLinkProgram(pid);

	push	ebx
	call	DWORD PTR ?myglfunc@@3PAPAXA+20

; 108  : 
; 109  : 	// initialize sound
; 110  : 	CreateThread(0, 0, (LPTHREAD_START_ROUTINE)_4klang_render, lpSoundBuffer, 0, 0);

	xor	esi, esi
	push	esi
	push	esi
	push	OFFSET ?lpSoundBuffer@@3PAMA		; lpSoundBuffer
	push	OFFSET __4klang_render@4
	push	esi
	push	esi
	call	DWORD PTR __imp__CreateThread@24

; 111  : 	waveOutOpen(&hWaveOut, WAVE_MAPPER, &WaveFMT, NULL, 0, CALLBACK_NULL);

	push	esi
	push	esi
	push	esi
	push	OFFSET ?WaveFMT@@3UtWAVEFORMATEX@@A
	push	-1
	push	OFFSET ?hWaveOut@@3PAUHWAVEOUT__@@A
	call	DWORD PTR __imp__waveOutOpen@24

; 112  : 	waveOutPrepareHeader(hWaveOut, &WaveHDR, sizeof(WaveHDR));

	push	32					; 00000020H
	mov	esi, OFFSET ?WaveHDR@@3Uwavehdr_tag@@A
	push	esi
	push	DWORD PTR ?hWaveOut@@3PAUHWAVEOUT__@@A
	call	DWORD PTR __imp__waveOutPrepareHeader@12

; 113  : 	waveOutWrite(hWaveOut, &WaveHDR, sizeof(WaveHDR));

	push	32					; 00000020H
	push	esi
	push	DWORD PTR ?hWaveOut@@3PAUHWAVEOUT__@@A
	call	DWORD PTR __imp__waveOutWrite@12

; 114  : 	const int to = timeGetTime();

	mov	esi, DWORD PTR __imp__timeGetTime@0
	call	esi
	mov	edi, eax
$LL4@entrypoint:

; 115  : 	
; 116  : 	// play intro
; 117  : 	do 
; 118  : 	{
; 119  : 		waveOutGetPosition(hWaveOut, &MMTime, sizeof(MMTIME));

	push	12					; 0000000cH
	push	OFFSET ?MMTime@@3Ummtime_tag@@A
	push	DWORD PTR ?hWaveOut@@3PAUHWAVEOUT__@@A
	call	DWORD PTR __imp__waveOutGetPosition@12

; 120  : 		oglUseProgram(pid);

	push	ebx
	call	DWORD PTR ?myglfunc@@3PAPAXA+24

; 121  : 		oglUniform1i(oglGetUniformLocation(pid, VAR_T), timeGetTime() - to);

	call	esi
	sub	eax, edi
	push	eax
	push	OFFSET $SG48295
	push	ebx
	call	DWORD PTR ?myglfunc@@3PAPAXA+32
	push	eax
	call	DWORD PTR ?myglfunc@@3PAPAXA+28

; 122  : 		glRects(-1, -1, 1, 1);

	push	1
	push	1
	push	-1
	push	-1
	call	DWORD PTR __imp__glRects@16

; 123  : 		SwapBuffers(hDC);

	push	ebp
	call	DWORD PTR __imp__SwapBuffers@4

; 124  : 	} while(!GetAsyncKeyState(VK_ESCAPE) && MMTime.u.sample < 5990000);

	push	27					; 0000001bH
	call	DWORD PTR __imp__GetAsyncKeyState@4
	test	ax, ax
	jne	SHORT $LN6@entrypoint
	cmp	DWORD PTR ?MMTime@@3Ummtime_tag@@A+4, 5990000 ; 005b6670H
	jb	SHORT $LL4@entrypoint
$LN6@entrypoint:

; 125  : 
; 126  : 	#ifdef CLEANDESTROY
; 127  : 	sndPlaySound(0,0);
; 128  : 	ChangeDisplaySettings( 0, 0 );
; 129  : 	ShowCursor(1);
; 130  : 	#endif
; 131  : 
; 132  : 	ExitProcess(0);

	push	0
	jmp	$LN12@entrypoint
$LN11@entrypoint:
?entrypoint@@YGXXZ ENDP					; entrypoint
_TEXT	ENDS
END
